"""Add password_hash column to user table

Revision ID: 36b69a46c28d
Revises: 
Create Date: 2024-10-01 19:18:51.665856

"""
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = '36b69a46c28d'
down_revision = None
branch_labels = None
depends_on = None

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('blogs', schema=None) as batch_op:
        batch_op.add_column(sa.Column('public_id', sa.String(), nullable=True))  # Make it nullable first
        batch_op.create_unique_constraint('uq_blogs_public_id', ['public_id'])  # Name the unique constraint

    # Now, you should populate `public_id` with a default value if needed (e.g., UUID)
    # This part would need a custom SQL statement depending on your logic
    # Here's an example of using SQLite's built-in UUID function (if you're using a UUID as public_id)
    # Note: You might need to customize this depending on how you generate `public_id`.
    # op.execute("UPDATE blogs SET public_id = some_default_value") # Fill in logic here

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('password_hash', sa.String(length=128), nullable=False))
        batch_op.add_column(sa.Column('is_admin', sa.Boolean(), nullable=True))
        batch_op.alter_column('username',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=100),
               existing_nullable=False)
        batch_op.drop_column('public_id')
        batch_op.drop_column('name')
        batch_op.drop_column('password')

    # After populating, alter the column to be non-nullable
    with op.batch_alter_table('blogs', schema=None) as batch_op:
        batch_op.alter_column('public_id', nullable=False)

    # ### end Alembic commands ###

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('password', sa.VARCHAR(length=128), nullable=False))
        batch_op.add_column(sa.Column('name', sa.VARCHAR(length=40), nullable=False))
        batch_op.add_column(sa.Column('public_id', sa.INTEGER(), nullable=False))
        batch_op.alter_column('username',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
        batch_op.drop_column('is_admin')
        batch_op.drop_column('password_hash')

    with op.batch_alter_table('blogs', schema=None) as batch_op:
        batch_op.drop_constraint('uq_blogs_public_id', type_='unique')
        batch_op.drop_column('public_id')

    # ### end Alembic commands ###
